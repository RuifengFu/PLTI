// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";

function $$eval(expr) {
  switch (expr.TAG | 0) {
    case /* Cst */0 :
        return expr._0;
    case /* Add */1 :
        return $$eval(expr._0) + $$eval(expr._1) | 0;
    case /* Mul */2 :
        return Math.imul($$eval(expr._0), $$eval(expr._1));
    
  }
}

var Expr0 = {
  $$eval: $$eval
};

function $$eval$1(_instrs, _stk) {
  while(true) {
    var stk = _stk;
    var instrs = _instrs;
    if (instrs) {
      var i = instrs.hd;
      if (typeof i === "number") {
        if (i !== 0) {
          if (stk) {
            var match = stk.tl;
            if (match) {
              _stk = {
                hd: Math.imul(stk.hd, match.hd),
                tl: match.tl
              };
              _instrs = instrs.tl;
              continue ;
            }
            
          }
          
        } else if (stk) {
          var match$1 = stk.tl;
          if (match$1) {
            _stk = {
              hd: stk.hd + match$1.hd | 0,
              tl: match$1.tl
            };
            _instrs = instrs.tl;
            continue ;
          }
          
        }
        
      } else {
        _stk = {
          hd: i._0,
          tl: stk
        };
        _instrs = instrs.tl;
        continue ;
      }
    } else if (stk) {
      return stk.hd;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Tiny0.res",
            36,
            13
          ],
          Error: new Error()
        };
  };
}

var Instr0 = {
  $$eval: $$eval$1
};

function compile(expr) {
  switch (expr.TAG | 0) {
    case /* Cst */0 :
        return {
                hd: /* Cst */{
                  _0: expr._0
                },
                tl: /* [] */0
              };
    case /* Add */1 :
        return List.append(List.append(compile(expr._0), compile(expr._1)), {
                    hd: /* Add */0,
                    tl: /* [] */0
                  });
    case /* Mul */2 :
        return List.append(List.append(compile(expr._0), compile(expr._1)), {
                    hd: /* Mul */1,
                    tl: /* [] */0
                  });
    
  }
}

function test_compile(src) {
  var compiled = compile(src);
  var computed = $$eval$1(compiled, /* [] */0);
  if (computed === $$eval(src)) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Tiny0.res",
          54,
          4
        ],
        Error: new Error()
      };
}

function basic_test(param) {
  var tests = [
    {
      TAG: /* Cst */0,
      _0: 42
    },
    {
      TAG: /* Add */1,
      _0: {
        TAG: /* Cst */0,
        _0: 1
      },
      _1: {
        TAG: /* Cst */0,
        _0: 2
      }
    },
    {
      TAG: /* Mul */2,
      _0: {
        TAG: /* Cst */0,
        _0: 1
      },
      _1: {
        TAG: /* Cst */0,
        _0: 2
      }
    },
    {
      TAG: /* Add */1,
      _0: {
        TAG: /* Add */1,
        _0: {
          TAG: /* Cst */0,
          _0: 1
        },
        _1: {
          TAG: /* Cst */0,
          _0: 2
        }
      },
      _1: {
        TAG: /* Cst */0,
        _0: 3
      }
    },
    {
      TAG: /* Mul */2,
      _0: {
        TAG: /* Mul */2,
        _0: {
          TAG: /* Cst */0,
          _0: 1
        },
        _1: {
          TAG: /* Cst */0,
          _0: 2
        }
      },
      _1: {
        TAG: /* Cst */0,
        _0: 3
      }
    },
    {
      TAG: /* Add */1,
      _0: {
        TAG: /* Mul */2,
        _0: {
          TAG: /* Cst */0,
          _0: 1
        },
        _1: {
          TAG: /* Cst */0,
          _0: 2
        }
      },
      _1: {
        TAG: /* Cst */0,
        _0: 3
      }
    },
    {
      TAG: /* Mul */2,
      _0: {
        TAG: /* Add */1,
        _0: {
          TAG: /* Cst */0,
          _0: 1
        },
        _1: {
          TAG: /* Cst */0,
          _0: 2
        }
      },
      _1: {
        TAG: /* Cst */0,
        _0: 3
      }
    }
  ];
  Belt_Array.forEachWithIndex(tests, (function (i, t) {
          test_compile(t);
          var i$1 = i + 1 | 0;
          console.log("test " + i$1 + " passed");
        }));
}

var Tests = {
  test_compile: test_compile,
  basic_test: basic_test
};

basic_test(undefined);

var app = List.append;

export {
  Expr0 ,
  app ,
  Instr0 ,
  compile ,
  Tests ,
}
/*  Not a pure module */
