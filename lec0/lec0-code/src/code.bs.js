// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";

function $$eval(expr) {
  switch (expr.TAG | 0) {
    case /* Cst */0 :
        return expr._0;
    case /* Add */1 :
        return $$eval(expr._0) + $$eval(expr._1) | 0;
    case /* Mul */2 :
        return Math.imul($$eval(expr._0), $$eval(expr._1));
    
  }
}

var Expr0 = {
  $$eval: $$eval
};

function $$eval$1(_instrs, _stk) {
  while(true) {
    var stk = _stk;
    var instrs = _instrs;
    if (instrs) {
      var i = instrs.hd;
      if (typeof i === "number") {
        if (i !== 0) {
          if (stk) {
            var match = stk.tl;
            if (match) {
              _stk = {
                hd: Math.imul(stk.hd, match.hd),
                tl: match.tl
              };
              _instrs = instrs.tl;
              continue ;
            }
            
          }
          
        } else if (stk) {
          var match$1 = stk.tl;
          if (match$1) {
            _stk = {
              hd: stk.hd + match$1.hd | 0,
              tl: match$1.tl
            };
            _instrs = instrs.tl;
            continue ;
          }
          
        }
        
      } else {
        _stk = {
          hd: i._0,
          tl: stk
        };
        _instrs = instrs.tl;
        continue ;
      }
    } else if (stk) {
      return stk.hd;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "code.res",
            35,
            13
          ],
          Error: new Error()
        };
  };
}

var Instr0 = {
  $$eval: $$eval$1
};

function compile(expr) {
  switch (expr.TAG | 0) {
    case /* Cst */0 :
        return {
                hd: /* Cst */{
                  _0: expr._0
                },
                tl: /* [] */0
              };
    case /* Add */1 :
        return List.append(List.append(compile(expr._0), compile(expr._1)), {
                    hd: /* Add */0,
                    tl: /* [] */0
                  });
    case /* Mul */2 :
        return List.append(List.append(compile(expr._0), compile(expr._1)), {
                    hd: /* Mul */1,
                    tl: /* [] */0
                  });
    
  }
}

function $$eval$2(_expr, _env) {
  while(true) {
    var env = _env;
    var expr = _expr;
    switch (expr.TAG | 0) {
      case /* Cst */0 :
          return expr._0;
      case /* Add */1 :
          return $$eval$2(expr._0, env) + $$eval$2(expr._1, env) | 0;
      case /* Mul */2 :
          return Math.imul($$eval$2(expr._0, env), $$eval$2(expr._1, env));
      case /* Var */3 :
          return List.assoc(expr._0, env);
      case /* Let */4 :
          _env = {
            hd: [
              expr._0,
              $$eval$2(expr._1, env)
            ],
            tl: env
          };
          _expr = expr._2;
          continue ;
      
    }
  };
}

var Expr1 = {
  $$eval: $$eval$2
};

function $$eval$3(_expr, _s) {
  while(true) {
    var s = _s;
    var expr = _expr;
    switch (expr.TAG | 0) {
      case /* Cst */0 :
          return expr._0;
      case /* Add */1 :
          return $$eval$3(expr._0, s) + $$eval$3(expr._1, s) | 0;
      case /* Mul */2 :
          return Math.imul($$eval$3(expr._0, s), $$eval$3(expr._1, s));
      case /* Var */3 :
          return List.nth(s, expr._0);
      case /* Let */4 :
          _s = {
            hd: $$eval$3(expr._0, s),
            tl: s
          };
          _expr = expr._1;
          continue ;
      
    }
  };
}

var Nameless = {
  $$eval: $$eval$3
};

function index(cenv, x) {
  var _cenv = cenv;
  var _n = 0;
  while(true) {
    var n = _n;
    var cenv$1 = _cenv;
    if (cenv$1) {
      if (Caml_obj.equal(cenv$1.hd, x)) {
        return n;
      }
      _n = n + 1 | 0;
      _cenv = cenv$1.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function compile1(expr, cenv) {
  switch (expr.TAG | 0) {
    case /* Cst */0 :
        return {
                TAG: /* Cst */0,
                _0: expr._0
              };
    case /* Add */1 :
        return {
                TAG: /* Add */1,
                _0: compile1(expr._0, cenv),
                _1: compile1(expr._1, cenv)
              };
    case /* Mul */2 :
        return {
                TAG: /* Mul */2,
                _0: compile1(expr._0, cenv),
                _1: compile1(expr._1, cenv)
              };
    case /* Var */3 :
        return {
                TAG: /* Var */3,
                _0: index(cenv, expr._0)
              };
    case /* Let */4 :
        return {
                TAG: /* Let */4,
                _0: compile1(expr._1, cenv),
                _1: compile1(expr._2, {
                      hd: expr._0,
                      tl: cenv
                    })
              };
    
  }
}

function $$eval$4(instrs, stk) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "code.res",
          124,
          13
        ],
        Error: new Error()
      };
}

var Instr1 = {
  $$eval: $$eval$4
};

function sindex(senv, i) {
  var _senv = senv;
  var _i = i;
  var _acc = 0;
  while(true) {
    var acc = _acc;
    var i$1 = _i;
    var senv$1 = _senv;
    if (senv$1) {
      if (senv$1.hd) {
        _acc = acc + 1 | 0;
        _senv = senv$1.tl;
        continue ;
      }
      if (i$1 === 0) {
        return acc;
      }
      _acc = acc + 1 | 0;
      _i = i$1 - 1 | 0;
      _senv = senv$1.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function scompile(expr) {
  var go = function (expr, senv) {
    switch (expr.TAG | 0) {
      case /* Cst */0 :
          return {
                  hd: {
                    TAG: /* Cst */0,
                    _0: expr._0
                  },
                  tl: /* [] */0
                };
      case /* Add */1 :
          return Belt_List.concatMany([
                      go(expr._0, senv),
                      go(expr._1, {
                            hd: /* Stmp */1,
                            tl: senv
                          }),
                      {
                        hd: /* Add */0,
                        tl: /* [] */0
                      }
                    ]);
      case /* Mul */2 :
          return Belt_List.concatMany([
                      go(expr._0, senv),
                      go(expr._1, {
                            hd: /* Stmp */1,
                            tl: senv
                          }),
                      {
                        hd: /* Mul */1,
                        tl: /* [] */0
                      }
                    ]);
      case /* Var */3 :
          return {
                  hd: {
                    TAG: /* Var */1,
                    _0: sindex(senv, expr._0)
                  },
                  tl: /* [] */0
                };
      case /* Let */4 :
          return Belt_List.concatMany([
                      go(expr._0, senv),
                      go(expr._1, {
                            hd: /* Slocal */0,
                            tl: senv
                          }),
                      {
                        hd: /* Swap */3,
                        tl: {
                          hd: /* Pop */2,
                          tl: /* [] */0
                        }
                      }
                    ]);
      
    }
  };
  return go(expr, /* [] */0);
}

var NamelessToStackVM = {
  sindex: sindex,
  scompile: scompile
};

function sindex$1(senv, s) {
  var _senv = senv;
  var _acc = 0;
  while(true) {
    var acc = _acc;
    var senv$1 = _senv;
    if (senv$1) {
      var x = senv$1.hd;
      if (x) {
        if (x._0 === s) {
          return acc;
        }
        _acc = acc + 1 | 0;
        _senv = senv$1.tl;
        continue ;
      }
      _acc = acc + 1 | 0;
      _senv = senv$1.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function scompile$1(expr) {
  var go = function (expr, senv) {
    switch (expr.TAG | 0) {
      case /* Cst */0 :
          return {
                  hd: {
                    TAG: /* Cst */0,
                    _0: expr._0
                  },
                  tl: /* [] */0
                };
      case /* Add */1 :
          return Belt_List.concatMany([
                      go(expr._0, senv),
                      go(expr._1, {
                            hd: /* Stmp */0,
                            tl: senv
                          }),
                      {
                        hd: /* Add */0,
                        tl: /* [] */0
                      }
                    ]);
      case /* Mul */2 :
          return Belt_List.concatMany([
                      go(expr._0, senv),
                      go(expr._1, {
                            hd: /* Stmp */0,
                            tl: senv
                          }),
                      {
                        hd: /* Mul */1,
                        tl: /* [] */0
                      }
                    ]);
      case /* Var */3 :
          return {
                  hd: {
                    TAG: /* Var */1,
                    _0: sindex$1(senv, expr._0)
                  },
                  tl: /* [] */0
                };
      case /* Let */4 :
          return Belt_List.concatMany([
                      go(expr._1, senv),
                      go(expr._2, {
                            hd: /* Slocal */{
                              _0: expr._0
                            },
                            tl: senv
                          }),
                      {
                        hd: /* Swap */3,
                        tl: {
                          hd: /* Pop */2,
                          tl: /* [] */0
                        }
                      }
                    ]);
      
    }
  };
  return go(expr, /* [] */0);
}

var ExprToStackMV = {
  sindex: sindex$1,
  scompile: scompile$1
};

var app = List.append;

var concatMany = Belt_List.concatMany;

export {
  Expr0 ,
  app ,
  Instr0 ,
  compile ,
  Expr1 ,
  Nameless ,
  index ,
  compile1 ,
  Instr1 ,
  concatMany ,
  NamelessToStackVM ,
  ExprToStackMV ,
}
/* No side effect */
